(function() {
  var ActivatePowerMode, CompositeDisposable, configSchema, random, throttle;

  throttle = require("lodash.throttle");

  random = require("lodash.random");

  CompositeDisposable = require("atom").CompositeDisposable;

  configSchema = require("./config-schema");

  module.exports = ActivatePowerMode = {
    config: configSchema,
    subscriptions: null,
    active: false,
    activate: function(state) {
      this.subscriptions = new CompositeDisposable;
      this.subscriptions.add(atom.commands.add("atom-workspace", {
        "activate-power-mode:toggle": (function(_this) {
          return function() {
            return _this.toggle();
          };
        })(this)
      }));
      this.activeItemSubscription = atom.workspace.onDidChangeActivePaneItem((function(_this) {
        return function() {
          return _this.subscribeToActiveTextEditor();
        };
      })(this));
      this.subscribeToActiveTextEditor();
      return this.setupCanvas();
    },
    destroy: function() {
      var _ref;
      return (_ref = this.activeItemSubscription) != null ? _ref.dispose() : void 0;
    },
    getConfig: function(config) {
      return atom.config.get("activate-power-mode." + config);
    },
    subscribeToActiveTextEditor: function() {
      var _ref;
      this.throttledShake = throttle(this.shake.bind(this), 100, {
        trailing: false
      });
      this.throttledSpawnParticles = throttle(this.spawnParticles.bind(this), 25, {
        trailing: false
      });
      this.editor = atom.workspace.getActiveTextEditor();
      if (!this.editor) {
        return;
      }
      this.editorElement = atom.views.getView(this.editor);
      this.editorElement.classList.add("power-mode");
      if ((_ref = this.editorChangeSubscription) != null) {
        _ref.dispose();
      }
      this.editorChangeSubscription = this.editor.getBuffer().onDidChange(this.onChange.bind(this));
      if (this.canvas) {
        return this.canvas.style.display = "block";
      }
    },
    setupCanvas: function() {
      this.canvas = document.createElement("canvas");
      this.context = this.canvas.getContext("2d");
      this.canvas.classList.add("power-mode-canvas");
      return this.editorElement.parentNode.appendChild(this.canvas);
    },
    calculateCursorOffset: function() {
      var editorRect, scrollViewRect;
      editorRect = this.editorElement.getBoundingClientRect();
      scrollViewRect = this.editorElement.shadowRoot.querySelector(".scroll-view").getBoundingClientRect();
      return {
        top: scrollViewRect.top - editorRect.top + this.editor.getLineHeightInPixels() / 2,
        left: scrollViewRect.left - editorRect.left
      };
    },
    onChange: function(e) {
      var range, spawnParticles;
      if (!this.active) {
        return;
      }
      spawnParticles = true;
      if (e.newText) {
        spawnParticles = e.newText !== "\n";
        range = e.newRange.end;
      } else {
        range = e.newRange.start;
      }
      if (spawnParticles && this.getConfig("particles.enabled")) {
        this.throttledSpawnParticles(range);
      }
      if (this.getConfig("screenShake.enabled")) {
        return this.throttledShake();
      }
    },
    shake: function() {
      var max, min, x, y;
      min = this.getConfig("screenShake.minIntensity");
      max = this.getConfig("screenShake.maxIntensity");
      x = this.shakeIntensity(min, max);
      y = this.shakeIntensity(min, max);
      this.editorElement.style.top = "" + y + "px";
      this.editorElement.style.left = "" + x + "px";
      return setTimeout((function(_this) {
        return function() {
          _this.editorElement.style.top = "";
          return _this.editorElement.style.left = "";
        };
      })(this), 75);
    },
    shakeIntensity: function(min, max) {
      var direction;
      direction = Math.random() > 0.5 ? -1 : 1;
      return random(min, max, true) * direction;
    },
    spawnParticles: function(range) {
      var color, cursorOffset, left, numParticles, top, _ref, _results;
      cursorOffset = this.calculateCursorOffset();
      _ref = this.editor.pixelPositionForScreenPosition(range), left = _ref.left, top = _ref.top;
      left += cursorOffset.left - this.editor.getScrollLeft();
      top += cursorOffset.top - this.editor.getScrollTop();
      color = this.getColorAtPosition(left, top);
      numParticles = random(this.getConfig("particles.spawnCount.min"), this.getConfig("particles.spawnCount.max"));
      _results = [];
      while (numParticles--) {
        this.particles[this.particlePointer] = this.createParticle(left, top, color);
        _results.push(this.particlePointer = (this.particlePointer + 1) % this.getConfig("particles.totalCount.max"));
      }
      return _results;
    },
    getColorAtPosition: function(left, top) {
      var el, offset;
      offset = this.editorElement.getBoundingClientRect();
      el = atom.views.getView(this.editor).shadowRoot.elementFromPoint(left + offset.left, top + offset.top);
      if (el) {
        return getComputedStyle(el).color;
      } else {
        return "rgb(255, 255, 255)";
      }
    },
    createParticle: function(x, y, color) {
      return {
        x: x,
        y: y,
        alpha: 1,
        color: color,
        velocity: {
          x: -1 + Math.random() * 2,
          y: -3.5 + Math.random() * 2
        }
      };
    },
    drawParticles: function() {
      var gco, particle, size, _i, _len, _ref;
      if (this.active) {
        requestAnimationFrame(this.drawParticles.bind(this));
      }
      this.canvas.width = this.editorElement.offsetWidth;
      this.canvas.height = this.editorElement.offsetHeight;
      gco = this.context.globalCompositeOperation;
      this.context.globalCompositeOperation = "lighter";
      _ref = this.particles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        particle = _ref[_i];
        if (particle.alpha <= 0.1) {
          continue;
        }
        particle.velocity.y += 0.075;
        particle.x += particle.velocity.x;
        particle.y += particle.velocity.y;
        particle.alpha *= 0.96;
        this.context.fillStyle = "rgba(" + particle.color.slice(4, -1) + ", " + particle.alpha + ")";
        size = random(this.getConfig("particles.size.min"), this.getConfig("particles.size.max"), true);
        this.context.fillRect(Math.round(particle.x - size / 2), Math.round(particle.y - size / 2), size, size);
      }
      return this.context.globalCompositeOperation = gco;
    },
    toggle: function() {
      this.active = !this.active;
      this.particlePointer = 0;
      this.particles = [];
      return requestAnimationFrame(this.drawParticles.bind(this));
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/key/.atom/packages/activate-power-mode/lib/activate-power-mode.coffee
