{"name":"file-header","main":"./lib/file-header","version":"1.9.0","description":"Customize, add, update and cooperate your authoring information in header comment","author":{"name":"Guan Gui","url":"http://guiguan.net"},"contributors":[{"name":"Guan Gui","url":"http://guiguan.net"},{"name":"Paul Joannon","url":"http://paulloz.com"}],"keywords":["author","file header","header comment","modified time","created time"],"repository":{"type":"git","url":"git+https://github.com/guiguan/file-header.git"},"bugs":{"url":"https://github.com/guiguan/file-header/issues"},"homepage":"https://github.com/guiguan/file-header#readme","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"moment":"^2.10.6"},"readme":"<!--\n@Author: Guan Gui <guiguan>\n@Date:   2016-01-21T00:47:29+11:00\n@Email:  root@guiguan.net\n@Last modified by:   guiguan\n@Last modified time: 2016-05-13T14:19:48+10:00\n-->\n# FileHeader for Atom\nFileHeader allows you to customize, add, update and cooperate your authoring information in header comment like this:\n\n![File Header Demo](https://raw.githubusercontent.com/guiguan/file-header/master/demo.gif)\n\nThis package is inspired by and could be considered equivalent to [FileHeader for Sublime](https://github.com/shiyanhui/FileHeader) by [shiyanhui](https://github.com/shiyanhui). It is compatible with headers generated by FileHeader for Sublime.\n\n# Installation\nJust search for `file-header` in Atom `Settings > Install`, and press `Install`.\n\n# Usage\n1. Configure your real name, username and email in FileHeader's settings (<kbd>cmd+,</kbd> > Packages > file-header).\n2. Use <kbd>shift-cmd-H</kbd> to add new header for current editing file. You can also use menu item from menu bar `Packages > File Header` or context menu `Add File Header` to do so. Or, you can turn on `Enable Auto Adding Header` in the settings to add a header for a new file when you save your the file. When you want to temporarily disable auto update, you can use either menu item or context menu `Disable Auto Update`, and later, you can use `Enable Auto Update` to turn the function back on.\n3. Just hit <kbd>cmd-s</kbd> to save and your header's last modified info will be automatically updated.\n\n# Customise Template\nFileHeader came with a pre-defiend language-to-template mappings (`lang-mapping.json`) and bunch of template files (`templates/*`). Check them out in the `lib` directory of FileHeader package. You are free to override or partially override them in your own config directory. Check out the option `Config Directory Path` from FileHeader settings for details.\n\n# Language Specific Setting\nApart from general configurations in FileHeader's settings, you can also configure everything language specific directly in your `config.cson` file (`Atom > Open Your Config`):\n\n```CoffeeScript\n\"*\":\n    \"file-header\":\n        autoAddingHeaderEnabled: true\n        email: \"...\"\n        realname: \"...\"\n        username: \"paulloz\"\n\".gfm.source\":\n    \"file-header\":\n        username: \"...\"\n        autoAddingHeaderEnabled: false\n\".plain.text\":\n    \"file-header\":\n        autoAddingHeaderEnabled: true\n```\n\nFor all configurable options, please have a look of `config` object in source code `file-header.coffee`.\n\n## Supported Language\nHere are a list of language-to-template mappings I came up with. Feel free to make a pull request to me if you want to contribute :).\n\n| Language Scope | Template File |\n| :------------- | :------------ |\n|source.arm|Clojure.tmpl|\n|source.c|C.tmpl|\n|source.cake|C.tmpl|\n|source.clojure|Clojure.tmpl|\n|source.coffee|ShellScript.tmpl|\n|source.coffee.jsx|ShellScript.tmpl|\n|source.cpp|C.tmpl|\n|source.cs|C.tmpl|\n|source.css|C.tmpl|\n|source.css.less|C.tmpl|\n|source.css.scss|SASS.tmpl|\n|source.csx|C.tmpl|\n|source.erlang|Erlang.tmpl|\n|source.gfm|HTML.tmpl|\n|source.git-config|ShellScript.tmpl|\n|source.go|C.tmpl|\n|source.gotemplate|GoTemplate.tmpl|\n|source.haskell|Haskell.tmpl|\n|source.java|C.tmpl|\n|source.java-properties|ShellScript.tmpl|\n|source.js|C.tmpl|\n|source.js.rails source.js.jquery|C.tmpl|\n|source.js.jsx|C.tmpl|\n|source.litcoffee|HTML.tmpl|\n|source.lua|Haskell.tmpl|\n|source.makefile|ShellScript.tmpl|\n|source.matlab|Erlang.tmpl|\n|source.nginx|ShellScript.tmpl|\n|source.objc|C.tmpl|\n|source.objcpp|C.tmpl|\n|source.perl|ShellScript.tmpl|\n|source.perl6|ShellScript.tmpl|\n|source.plist|HTML.tmpl|\n|source.python|ShellScript.tmpl|\n|source.python.django|ShellScript.tmpl|\n|source.ruby|ShellScript.tmpl|\n|source.ruby.rails|ShellScript.tmpl|\n|source.ruby.rails.rjs|ShellScript.tmpl|\n|source.rust|SASS.tmpl|\n|source.sass|SASS.tmpl|\n|source.shell|ShellScript.tmpl|\n|source.sql|C.tmpl|\n|source.sql.mustache|C.tmpl|\n|source.sql.ruby|C.tmpl|\n|source.strings|C.tmpl|\n|source.swift|C.tmpl|\n|source.toml|ShellScript.tmpl|\n|source.yaml|ShellScript.tmpl|\n|source.verilog|C.tmpl|\n|text.html.basic|HTML.tmpl|\n|text.html.erb|HTML.tmpl|\n|text.html.gohtml|HTML.tmpl|\n|text.html.jsp|HTML.tmpl|\n|text.html.mustache|HTML.tmpl|\n|text.html.php|HTML.tmpl|\n|text.html.ruby|HTML.tmpl|\n|text.plain|Default.tmpl|\n|text.xml|HTML.tmpl|\n|text.xml.plist|HTML.tmpl|\n|text.xml.xsl|HTML.tmpl|\n\nYou can find out the scope of current editing file using <kbd>alt-cmd-p</kbd>. For all supported language scopes, you can use following code in `Developer Tools`:\n\n```js\nconsole.log(Object.keys(atom.grammars.grammarsByScopeName).join('\\n'))\n```\n\n`Developer Tools` can be opened using <kbd>alt-cmd-i</kbd>. You can use  [file-types](https://atom.io/packages/file-types) package by [execjosh](https://github.com/execjosh) to map more file types to language scopes.\n\n<!-- Piwik Image Tracker-->\n<img src=\"http://piwik.guiguan.net/piwik.php?idsite=4&rec=1\" style=\"border:0\" alt=\"\" />\n<!-- End Piwik -->\n","readmeFilename":"README.md","_id":"file-header@1.9.0","_shasum":"cd1c6d1472fd319270abc4d2efc7d8455b04e594","_resolved":"file:../d-116420-11182-2vrhc4/package.tgz","_from":"../d-116420-11182-2vrhc4/package.tgz"}